version: "3.9"

services:
  postgres:
    image: postgres:16-alpine
    container_name: backstage-postgres
    restart: unless-stopped
    env_file: .env
    volumes:
      - postgres_data:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U $$POSTGRES_USER -d $$POSTGRES_DB"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - app

  backstage:
    build:
      context: ./backstage
      dockerfile: packages/backend/Dockerfile
    container_name: backstage-app
    restart: unless-stopped
    depends_on:
      postgres:
        condition: service_healthy
    ports:
      - "${BACKSTAGE_PORT}:7007"
    env_file: .env
    volumes:
      - ./backstage:/app
      - yarn-cache:/home/node/.cache/yarn
    labels:
      - traefik.enable=true
      - traefik.docker.network=traefik
      - traefik.http.routers.${TRAEFIK_ROUTER_NAME}.rule=Host(`${BACKSTAGE_HOST}.${DOMAIN_NAME}`)
      - traefik.http.routers.${TRAEFIK_ROUTER_NAME}.entrypoints=web,websecure
      - traefik.http.routers.${TRAEFIK_ROUTER_NAME}.tls=true
      - traefik.http.routers.${TRAEFIK_ROUTER_NAME}.tls.certresolver=mytlschallenge
      - traefik.http.services.${TRAEFIK_SERVICE_NAME}.loadbalancer.server.port=7007
    networks:
      - app
      - traefik

volumes:
  postgres_data:
  yarn-cache:

networks:
  app:
    driver: bridge
  traefik:
    external: true
    name: traefik
